import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as i,c as l,a as t,b as e,d as r,e as a}from"./app-DgB7LUGM.js";const d="/db-labs/assets/GPDE-BRWL66Vz.jpg",p="/db-labs/assets/Gapminder-3E2TXqP3.png",h="/db-labs/assets/TWBDB-BhM_TjzZ.png",c="/db-labs/assets/OpenStreetMap-C4eITCTH.jpg",g="/db-labs/assets/UNdata-BMa1FcoW.png",b={},u=a('<h1 id="аналіз-предметноі-області" tabindex="-1"><a class="header-anchor" href="#аналіз-предметноі-області"><span>Аналіз предметної області</span></a></h1><h2 id="вступ" tabindex="-1"><a class="header-anchor" href="#вступ"><span>Вступ</span></a></h2><p><em>[Вступ повинен містити короткий огляд всього документу.]</em></p><h2 id="основні-визначення" tabindex="-1"><a class="header-anchor" href="#основні-визначення"><span>Основні визначення</span></a></h2><p><em>[Розділ містить визначення термінів та скорочень, які використовуються при аналізі предметної області.]</em></p><h2 id="підходи-та-способи-вирішення-завдання" tabindex="-1"><a class="header-anchor" href="#підходи-та-способи-вирішення-завдання"><span>Підходи та способи вирішення завдання</span></a></h2><h3 id="підходи-до-збору-даних" tabindex="-1"><a class="header-anchor" href="#підходи-до-збору-даних"><span>Підходи до збору даних</span></a></h3>',7),_={id:"api-application-programming-interface",tabindex:"-1"},D={class:"header-anchor",href:"#api-application-programming-interface"},m={href:"https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BA%D0%BB%D0%B0%D0%B4%D0%BD%D0%B8%D0%B9_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BD%D0%B8%D0%B9_%D1%96%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81",target:"_blank",rel:"noopener noreferrer"},k=a("<p>API — це набір визначених методів та протоколів, за допомогою яких одне програмне забезпечення може взаємодіяти з іншим. API дозволяють програмам отримувати доступ до певних функцій або даних сервісу без необхідності знати деталі його внутрішньої роботи.</p><p><strong>Де застосовується:</strong></p><p>API використовуються в багатьох сферах:</p><ul><li><strong>Соціальні мережі:</strong> отримання даних користувачів, постів та ін.</li><li><strong>Фінансові послуги:</strong> взаємодія між банківськими системами та фінтех-додатками.</li><li><strong>Геолокаційні сервіси:</strong> інтеграція картографічних та логістичних рішень через API (Google Maps, OpenStreetMap).</li><li><strong>Електронна комерція:</strong> доступ до товарних каталогів, управління замовленнями тощо.</li></ul><p><strong>Переваги:</strong></p><ul><li><strong>Простота інтеграції:</strong> API часто мають детальну документацію, що спрощує їх використання.</li><li><strong>Структуровані дані:</strong> API надає добре організовані дані у форматах JSON, XML тощо.</li><li><strong>Мінімальна обробка:</strong> Оскільки дані зазвичай структуровані, їх легше обробляти та аналізувати.</li></ul><p><strong>Недоліки:</strong></p><ul><li><strong>Обмеження:</strong> API часто мають ліміти на кількість запитів за певний час (щоденний ліміт запитів).</li><li><strong>Залежність:</strong> Зміна або припинення підтримки API може стати проблемою.</li><li><strong>Безпека:</strong> Потрібно дотримуватися політики безпеки при доступі до конфіденційних даних через API.</li></ul>",8),f=t("strong",null,"Приклад:",-1),B={href:"https://developers.facebook.com/docs/graph-api/overview/",target:"_blank",rel:"noopener noreferrer"},x=t("hr",null,null,-1),w={id:"веб-скрапінг-web-scraping",tabindex:"-1"},S={class:"header-anchor",href:"#веб-скрапінг-web-scraping"},P={href:"https://uk.wikipedia.org/wiki/Web_scraping",target:"_blank",rel:"noopener noreferrer"},y=a("<p>Веб-скрапінг — це техніка автоматизованого витягання інформації з вебсторінок. Скрипт &quot;читає&quot; HTML-код сайту і витягує необхідні дані (тексти, зображення, таблиці).</p><p><strong>Де застосовується:</strong></p><ul><li><strong>Аналіз ринку:</strong> збирання інформації про ціни товарів і послуг з сайтів електронної комерції.</li><li><strong>Новинні агрегатори:</strong> автоматичний збір статей з різних новинних порталів.</li><li><strong>Інтеграція даних:</strong> збирання інформації з публічних баз даних або платформ (наприклад, спортивні результати, котирування акцій).</li></ul><p><strong>Переваги:</strong></p><ul><li><strong>Доступ до публічних даних:</strong> Скрейпінг дозволяє отримувати дані, що не завжди доступні через API.</li><li><strong>Гнучкість:</strong> Можна збирати дані з будь-яких вебсайтів, незалежно від їхньої структури.</li><li><strong>Швидкість:</strong> Автоматизація дозволяє отримати велику кількість даних за короткий час.</li></ul><p><strong>Недоліки:</strong></p><ul><li><strong>Юридичні обмеження:</strong> Деякі сайти забороняють скрейпінг своїх сторінок через &quot;robots.txt&quot; або внутрішні політики.</li><li><strong>Зміна структури:</strong> Якщо сайт змінює структуру, скрипт може перестати працювати і потребує оновлення.</li><li><strong>Проблеми з правами</strong> на дані: Витягнуті дані можуть бути захищені авторськими правами.</li></ul><p><strong>Приклад:</strong> Збирання даних про ціни товарів з сайтів Amazon або eBay для порівняння цін.</p><hr>",9),v={id:"веб-краулінг-web-crawling",tabindex:"-1"},E={class:"header-anchor",href:"#веб-краулінг-web-crawling"},L={href:"https://uk.wikipedia.org/wiki/%D0%9F%D0%BE%D1%88%D1%83%D0%BA%D0%BE%D0%B2%D0%B8%D0%B9_%D1%80%D0%BE%D0%B1%D0%BE%D1%82",target:"_blank",rel:"noopener noreferrer"},q=a("<p>Веб-краулер — це програма, що автоматично переглядає вебсторінки, переходячи за гіперпосиланнями. Основна мета — індексування сайтів для пошукових систем або масове збирання даних з великої кількості сторінок.</p><p><strong>Де застосовується:</strong></p><ul><li><strong>Пошукові системи:</strong> Google, Bing, Yahoo використовують краулери для індексації сторінок інтернету.</li><li><strong>SEO-оптимізація:</strong> аналіз контенту конкурентів для визначення стратегій пошукової оптимізації.</li><li><strong>Дослідження ринку:</strong> автоматизований збір даних для аналізу трендів.</li></ul><p><strong>Переваги:</strong></p><ul><li><strong>Обробка великої кількості сторінок:</strong> Можливість охоплювати тисячі або мільйони сторінок автоматично.</li><li><strong>Створення індексів:</strong> Веб-краулінг є основою для пошукових систем, що дозволяє швидкий пошук інформації в інтернеті.</li></ul><p><strong>Недоліки:</strong></p><ul><li><strong>Високі вимоги до ресурсів:</strong> Веб-краулінг потребує великої кількості обчислювальних ресурсів і часу.</li><li><strong>Юридичні обмеження:</strong> Багато сайтів встановлюють правила проти неконтрольованого краулінгу.</li><li><strong>Обробка дублікатів:</strong> Краулери можуть отримувати дублікатні сторінки, що потребує додаткової обробки.</li></ul>",7),A=t("strong",null,"Приклад:",-1),M={href:"https://uk.wikipedia.org/wiki/Googlebot",target:"_blank",rel:"noopener noreferrer"},O=t("hr",null,null,-1),T={id:"краудсорсинг-crowdsourcing",tabindex:"-1"},I={class:"header-anchor",href:"#краудсорсинг-crowdsourcing"},N={href:"https://uk.wikipedia.org/wiki/%D0%9A%D1%80%D0%B0%D1%83%D0%B4%D1%81%D0%BE%D1%80%D1%81%D0%B8%D0%BD%D0%B3",target:"_blank",rel:"noopener noreferrer"},G=a("<p>Краудсорсинг — це метод збору інформації або вирішення завдань за допомогою великої кількості людей (часто через інтернет). Інформацію або рішення надають користувачі, що сприяє колективній роботі.</p><p><strong>Де застовується:</strong></p><ul><li><strong>Створення контенту:</strong> Wikipedia — найбільша краудсорсингова платформа для збору та редагування енциклопедичної інформації.</li><li><strong>Соціальні дослідження:</strong> збору думок, проведення анкетувань або голосувань.</li><li><strong>Бізнес-рішення:</strong> збір ідей від клієнтів для покращення продуктів або послуг (наприклад, через платформи типу Kickstarter).</li></ul><p><strong>Переваги:</strong></p><ul><li><strong>Широкий доступ до ресурсів:</strong> Залучення багатьох людей дозволяє швидко збирати великі обсяги даних або ідей.</li><li><strong>Доступ до різноманітної інформації:</strong> Різні користувачі можуть надавати різні точки зору та унікальні рішення.</li></ul><p><strong>Недоліки:</strong></p><ul><li><strong>Контроль якості:</strong> Краудсорсинг може призводити до отримання неточної або неперевіреної інформації.</li><li><strong>Мотивація учасників:</strong> Користувачі можуть втрачати інтерес, якщо завдання не мотивують або процес стає занадто складним.</li></ul>",7),C=t("strong",null,"Приклади:",-1),z={href:"https://uk.wikipedia.org/wiki/Waze",target:"_blank",rel:"noopener noreferrer"},F=t("h3",{id:"способи-аналізу-даних",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#способи-аналізу-даних"},[t("span",null,"Способи аналізу даних")])],-1),W={id:"машинне-навчання-machine-learning",tabindex:"-1"},V={class:"header-anchor",href:"#машинне-навчання-machine-learning"},U={href:"https://uk.wikipedia.org/wiki/%D0%9C%D0%B0%D1%88%D0%B8%D0%BD%D0%BD%D0%B5_%D0%BD%D0%B0%D0%B2%D1%87%D0%B0%D0%BD%D0%BD%D1%8F",target:"_blank",rel:"noopener noreferrer"},Q=t("p",null,"Машинне навчавння — це галузь досліджень штучного інтелекту, зосереджена на розробці та вивченні статистичних алгоритмів, здатних навчатися з даних і узагальнюватися на небачені дані, й відтак виконувати завдання без явних інструкцій. Породжувальні штучні нейронні мережі нещодавно змогли перевершити за продуктивністю багато попередніх підходів.",-1),J=t("blockquote",null,[t("p",null,"Підходи машинного навчання застосовували до багатьох галузей, серед яких великі мовні моделі, комп'ютерне бачення, розпізнавання мовлення, фільтрування електронної пошти, сільське господарство та медицина, де розробка алгоритмів для виконання необхідних завдань була би занадто витратною. Машинне навчання відоме у своєму застосуванні в комерційних задачах під назвою «передбачувальна аналітика».")],-1),Y=t("p",null,"Хоч і не все машинне навчання ґрунтується на статистиці, обчислювальна статистика є важливим джерелом методів цієї галузі.",-1),j=t("p",null,"На початку розвитку ШІ деякі дослідники були зацікавлені в тому, щоб машини навчалися з даних. Вони використовували різні символьні методи, а також нейронні мережі — здебільшого перцептрони та інші моделі, які виявилися перевинаходами узагальнених лінійних моделей статистики. Також застосовували ймовірнісне міркування, особливо в автоматизованому медичному діагностуванні. Посилення акценту на логічному підході, що ґрунтується на знаннях, спричинило розрив між ШІ та машинним навчанням. Імовірнісні системи страждали на теоретичні та практичні проблеми збирання та подання даних. Близько 1980 року експертні системи почали домінувати в ШІ, а статистика відійшла на другий план. Незважаючи на це, навчання на основі символів та знань продовжувалося в межах ШІ, ведучи до індуктивного логічного програмування, але статистичні дослідження перемістилися в галузі розпізнавання образів та інформаційного пошуку.",-1),R={id:"табличні-процесори-spreadsheet",tabindex:"-1"},Z={class:"header-anchor",href:"#табличні-процесори-spreadsheet"},X={href:"https://translations.com.ua/tablychnyi-procesor.html",target:"_blank",rel:"noopener noreferrer"},H=t("p",null,"Табличний процесор, або електронна таблиця — це тип програмного забезпечення, яке використовується для організації, зберігання та роботи з даними в табличному форматі. Табличний процесор схожий на цифрову версію паперового аркуша. Це інструмент, який дозволяє впорядковувати дані в рядках і стовпцях та працювати з ними, подібно до великої таблиці. Зазвичай, електронна таблиця — це сітка рядків і стовпців, кожна клітинка якої містить певний фрагмент даних. Це дозволяє легко вводити, організовувати та редагувати дані.",-1),K=t("p",null,"Електронні таблиці також підтримують складні математичні та статистичні операції. Це дозволяє користувачам працювати з великими наборами даних, отримуючи миттєві результати.",-1),$=t("blockquote",null,[t("p",null,"За допомогою електронної таблиці можна виконувати обчислення та інші дії з даними, а результати автоматично оновлюються в режимі реального часу. Саме тому табличний процесор є дуже корисним інструментом для різних видів роботи, таких як фінансове моделювання, аналіз даних та управління проєктами.")],-1),tt=t("blockquote",null,[t("p",null,"Табличний процесор пропонує розширені функції, такі як макроси та мови сценаріїв. Це дозволяє автоматизувати повторювані завдання та створювати власні функціональні можливості, що може заощадити багато часу та зусиль.")],-1),et={id:"мови-програмування",tabindex:"-1"},nt={class:"header-anchor",href:"#мови-програмування"},rt={href:"https://uk.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B2%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F#%D0%9A%D0%BB%D0%B0%D1%81%D0%B8%D1%84%D1%96%D0%BA%D0%B0%D1%86%D1%96%D1%8F_%D0%BC%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F",target:"_blank",rel:"noopener noreferrer"},at=a('<p>Мова програмування — це штучна мова, створена для передачі команд машинам, зокрема комп&#39;ютерам. Вона є певною штучною формальною системою, засобами якої можна виражати алгоритми. Мова програмування визначається набором лексичних, синтаксичних і семантичних правил, які задають зовнішній вигляд програми та дії, що виконує комп&#39;ютер під її управлінням.</p><blockquote><p>Мови програмування високого рівня оперують сутностями ближчими людині, такими як об&#39;єкти, змінні, функції. Мови програмування нижчого рівня оперують сутностями ближчими машині: байти, адреси, інструкції. Текст програми мовою високого рівня зазвичай набагато коротший ніж текст такої самої програми мовою низького рівня, проте програма має більший розмір.</p></blockquote><p>Мови програмування можуть бути реалізовані як компільовані та інтерпретовані. Програма компільованою мовою за допомогою компілятора, особливої ​​програми, компілюється в машинний код (набір інструкцій) для даного типу процесора, що записується у об&#39;єктний модуль. З одного або кількох об&#39;єктних файлів компонувальник формує виконуваний файл, який може бути запущений на виконання як окрема програма. Іншими словами, компілятор переводить вихідний текст програми з мови програмування високого рівня в двійкові коди інструкцій процесора. Якщо програма написана скриптовою мовою, то інтерпретатор безпосередньо виконує (інтерпретує) вихідний текст без попереднього перекладу. При цьому програма залишається мовою оригіналу і не може бути запущена без інтерпретатора. Процесор комп&#39;ютера, у зв&#39;язку з цим, можна назвати інтерпретатором для машинного коду.</p><h3 id="методи-обробки-даних" tabindex="-1"><a class="header-anchor" href="#методи-обробки-даних"><span>Методи обробки даних</span></a></h3><h4 id="пакетна-обробка-batch-processing" tabindex="-1"><a class="header-anchor" href="#пакетна-обробка-batch-processing"><span>Пакетна обробка (Batch Processing)</span></a></h4><p>Пакетна обробка — організація виконання декількох процесів у попередньо визначеній послідовності за допомогою команд керування процесами та файлами операційної системи або спеціалізованої мови пакетної обробки.</p><p>Пакетна обробка як засіб організації завдань з&#39;явилась в часи, коли операційні системи були однозадачними, а запуск завдань здійснювався оператором вручну шляхом введення відповідних команд. Окрім команд запуску завдань оператор також вводив команди опису наборів даних, які могли міститись на магнітних дисках, магнітних або перфорованих стрічках, перфокартах тощо. Ці команди дозволяли програмі сприймати такі набори даних як одноманітні, незалежні від пристрою, способу організації та методів доступу (з прямим або послідовним доступом тощо). Введення цих команд вимагало значного часу, протягом якого машина фактично простоювала. Для запобігання таких простоїв було запропонованого записувати команди запуску програм, опису та ініціалізації наборів даних на носій та ініціювати виконання програм шляхом послідовного читання цих команд з такого носія. Для зручності ці команди звичайно записувались на перфокарти (що дозволяло досить легко замінювати перфокарти у стосі перфокарт — пакеті).</p><blockquote><p>Пакетна обробка застосовується і донині, наприклад при обробці фотографій, верстанні статей тощо, а розвиток мов керування завданнями призвів до створення командних інтерпретаторів.</p></blockquote><h4 id="обробка-в-реальному-часі-real-time-processing" tabindex="-1"><a class="header-anchor" href="#обробка-в-реальному-часі-real-time-processing"><span>Обробка в реальному часі (Real-time processing)</span></a></h4><p>Обробка в режимі реального часу має свої переваги у великій кількості галузей на сучасних ринках. Зі збільшенням уваги до великих даних ця система обробки та отримання інформації може вивести підприємства на новий рівень.</p><p>Приклади програм з обробкою в реальному часі можна знайти в банківських системах, потокових даних, структурах обслуговування клієнтів, метеорологічних радарах, тощо. Без обробки даних у режимі реального часу цим галузям дуже бракувало б точності.</p><blockquote><p>Наприклад, метеорологічний радар значною мірою покладається на дані в реальному часі, які надає система обробки даних. Через величезний обсяг даних, які збирають суперкомп’ютери для вивчення погодних взаємодій і прогнозів, обробка в реальному часі має вирішальне значення для успішної реалізації.</p></blockquote><h4 id="онлаин-обробка-online-processing" tabindex="-1"><a class="header-anchor" href="#онлаин-обробка-online-processing"><span>Онлайн-обробка (Online Processing)</span></a></h4><p>Онлайн-обробка(OLTP) — спосіб організації баз даних, при якому система працює з невеликими за розмірами транзакціями, що йдуть великим потоком, і при цьому клієнту потрібний від системи максимально швидкий час відповіді.</p><p>OLTP-застосунками охоплюється широкий спектр завдань в багатьох галузях — банківські і біржові операції, в промисловості — реєстрація проходження деталі на конвеєрі, фіксація в статистиці відвідин чергового відвідувача вебсайту, автоматизація бухгалтерського, складського обліку і обліку документів і т. д. Застосунки OLTP, як правило, автоматизують структуровані завдання обробки даних, що повторюються, такі як введення замовлень і банківські транзакції. OLTP-системи проектуються, налаштовуються і оптимізуються для виконання максимальної кількості транзакцій за короткі проміжки часу. Як правило, великої гнучкості тут не вимагається, і найчастіше використовується фіксований набір надійних і безпечних методів введення, модифікації, видалення даних та випуску оперативної звітності. Показником ефективності є кількість транзакцій, що виконуються за секунду. Зазвичай аналітичні можливості OLTP-систем сильно обмежені (або взагалі відсутні).</p><h4 id="багатопроцесорність-multiprocessing" tabindex="-1"><a class="header-anchor" href="#багатопроцесорність-multiprocessing"><span>Багатопроцесорність (Multiprocessing)</span></a></h4><p>Багатопроцесорність — це використання двох або більше центральних процесорів (CPU) в одній комп&#39;ютерній системі. Термін також стосується здатності системи підтримувати більше ніж однин процесор і/або здатність розділити завдання між ними. Є багато варіацій на цю основну тему, і визначення багатопроцесорності може змінюватися в залежності від контексту, в основному від того, як визначені процесори (кілька ядер на одному кристалі, множина чипів в одному корпусі, множина корпусів в одному системному модулі тощо).</p><p>Багатопроцесорністю іноді називають виконання багатьох паралельних програмних процесів в системі в протилежність виконання одного процесу в будь-який момент часу. При використанні цього визначення, багатопроцесорність іноді контрастує з багатозадачністю, яка може використовувати тільки один процесор, але включити його в тимчасових інтервалах між завданнями (тобто системи з поділом часу). Багатопроцесорність означає істинне паралельне виконання декількох процесів, що використовують більше одного процесора. <code>Система не може бути і багатопроцесорною і мультипрограмованою</code>, тільки однією з двох, або ні тією і ні іншою.</p><h4 id="таим-шеринг-time-sharing" tabindex="-1"><a class="header-anchor" href="#таим-шеринг-time-sharing"><span>Тайм-шеринг (Time-sharing)</span></a></h4><p>В комп&#39;ютерних системах поділ часу — це спосіб розподілу обчислювальних ресурсів між багатьма користувачами за допомогою мультипрограмування та багатозадачності. Вперше презентований в 1960-тих, та розвинутий в помітну обчислювальну модель в 1970-тих він здійснив значний технологічний прорив в історії обчислювальної техніки.</p><p>Дозволяючи багатьом користувачам одночасно взаємодіяти з одним комп&#39;ютером, поділ часу значно знизив ціну надання обчислювальних потужностей, уможлививши використання комп&#39;ютера організаціями та індивідами без необхідності його покупки. Також поділ часу посприяв розробці нових інтерактивних програм.</p><h4 id="ручна-обробка-даних-manual-data-processing" tabindex="-1"><a class="header-anchor" href="#ручна-обробка-даних-manual-data-processing"><span>Ручна обробка даних (Manual data processing)</span></a></h4><p>Поняття ручної обробки даних стосується процесу введення та обробки даних за допомогою ручних методів або пристроїв. Це включає в себе такі завдання як введення даних, перетворення даних і маніпулювання даними, які виконуються окремими особами вручну. Ручна обробка даних може використовуватися в різних контекстах, таких як пошук і знищення вірусів у локальній мережі, налаштування посібників для користувачів, взаємодія ручних клавіатур із системами обробки даних і обробка даних зображення. Метою ручної обробки даних є ефективна й точна обробка даних за допомогою ручних методів, часто за допомогою спеціалізованих пристроїв або систем. Це може включати такі завдання, як введення даних за допомогою клавіатурних перемикачів, перетворення даних і обробка компонування, а також читання та друк даних.</p><h4 id="механічна-обробка-даних-mechanical-data-processing" tabindex="-1"><a class="header-anchor" href="#механічна-обробка-даних-mechanical-data-processing"><span>Механічна обробка даних(Mechanical data processing)</span></a></h4><p>В цьому випадку дані обробляються механічно за допомогою пристроїв і машин. Це можуть бути прості пристрої, такі як калькулятори, друкарські машинки, друкарські верстати тощо. За допомогою цього методу можна виконати прості операції обробки даних. Він має набагато менше помилок, ніж ручна обробка даних, але збільшення даних зробило цей метод складнішим, тому зазвичай ми не побачимо його на серйозних виробництвах де важлива точність, швидкість та ефективність.</p><h4 id="електронна-обробка-даних-electronic-data-processing" tabindex="-1"><a class="header-anchor" href="#електронна-обробка-даних-electronic-data-processing"><span>Електронна обробка даних(Electronic data processing)</span></a></h4><p>Електронна обробка даних (EDP) означає збір даних за допомогою електронних пристроїв, таких як комп’ютери, сервери та технології Інтернету речей ( IoT ). Це також передбачає аналіз даних, узагальнення та запис результатів у формі, зручній для використання людиною.</p><p>Концепція EDP розвинулась із обробки даних. Термін з’явився в епоху, коли більшість обчислювальних даних фізично надавалися обчислювальному пристрою, як правило, у формі перфокарт. За допомогою цих програм вихідні дані представлялися або на перфокартах, або у вигляді паперового звіту.</p><ul><li>Чому EDP важлива:</li></ul><p>Обсяг даних, які генеруються щодня, зростає швидкими темпами. За деякими оцінками, розмір глобальної сфери даних становитиме кілька сотень зетабайт протягом наступних кількох років. Посилення оцифрування та поява нових технологій, таких як IoT та штучний інтелект, сприяють цьому вибуху даних.</p><p>Дані вважаються «новою олією», оскільки вони створюють можливості для навчання, вдосконалення та просування. Однак компаніям потрібен спосіб ефективного збору та отримання інформації зі своїх величезних стеків даних. Ручні методи обробки даних не в змозі обробляти великі обсяги даних, але EDP може.</p><h3 id="моделі-керування-доступом-до-даних" tabindex="-1"><a class="header-anchor" href="#моделі-керування-доступом-до-даних"><span>Моделі керування доступом до даних</span></a></h3><h4 id="рольова-модель-управління" tabindex="-1"><a class="header-anchor" href="#рольова-модель-управління"><span>Рольова модель управління</span></a></h4><p>Основний принцип рольової моделі передбачає розподіл функцій персоналу з урахуванням виду діяльності організації в цілому або роботи конкретного підрозділу, або при виконанні судових проектів. При використанні рольового методу немає потреби визначати тип доступу для кожного окремого користувача ресурсом. Досить встановити ступінь допуску для ролі, яку виконує користувач ресурсу відповідно до посадових обов&#39;язків або при виконанні окремого завдання. При цьому, допуск строго визначений роллю виконуваної співробітником та не виходить за межі, визначені початковим сценарієм.</p><blockquote><p>Перевага рольового методу полягає в тому, що доступом до ресурсу може користуватися кілька користувачів, які призначені на одну і ту ж роль або навпаки — один співробітник призначається на виконання декількох ролей без перегляду індивідуального рівня доступу. Однак, якщо в інтересах роботи виконавець вимагає розширити сферу допуску, передбачену роллю, то адміністратор переглядає ступінь доступу для кожного конкретного випадку. Метод рольового управління найбільш підходить для динамічних та мінливих хмарних систем управління.</p></blockquote><h4 id="дискреціине-управління" tabindex="-1"><a class="header-anchor" href="#дискреціине-управління"><span>Дискреційне управління</span></a></h4><p>Виборчий метод управління доступом передбачає право власника або адміністратора об&#39;єкта визначати та контролювати всіх, хто має доступ до системи або ресурсів, ґрунтуючись на ідентифікаційну інформацію про суб&#39;єктів (ключі доступу), допущених до контрольованої системи. Модель дискреційного доступу не представляє складності в налаштуванні та управлінні, й сумісна з більшістю програмного забезпечення та операційних систем, таких як Windows та інших. При цьому, адміністратор створює списки допущених до об&#39;єкта та вид використання ресурсу.</p><blockquote><p>Перевага дискреційного контролю доступу полягає в тому, що адміністратор може легко й швидко налаштувати дозвіл, визначаючи, хто й куди отримує доступ. При цьому, він ґрунтується на інтересах діяльності установи та режимі загальної політики безпеки організації. Недоліком є те, що занадто багато повноважень надається адміністратору списку. Це може спричинити ненавмисне надання доступу стороннім суб&#39;єктам, які можуть порушити цілісність системи безпеки організації та розпорядитися ресурсом без відома власника.</p></blockquote><h4 id="управління-доступом-на-основі-правил" tabindex="-1"><a class="header-anchor" href="#управління-доступом-на-основі-правил"><span>Управління доступом на основі правил</span></a></h4><p>Ця форма управління схожа з рольовим методом, але відрізняється тим, що власниками об&#39;єктів та адміністратором ресурсів встановлюються чіткі правила щодо обмеження доступу до об&#39;єкта в певний час доби або дозволяється тільки з конкретного пристрою. Крім того, дозволи до допуску можуть бути визначені кількістю попередніх спроб входу або місцем знаходження користувача. Також дозволи на доступ можуть бути визначені комбінацією встановлених правилами дій.</p><blockquote><p>Ця модель відмінно підходить для управління доступом в організаціях, які мають велику кількість об&#39;єктів з різним ступенем рівня доступу та різним регламентом роботи. Гнучкість системи безпеки на основі правил дозволяє визначати безліч комбінацій доступу в залежності від мінливого оточення.</p></blockquote><h4 id="мандатнии-метод-управління" tabindex="-1"><a class="header-anchor" href="#мандатнии-метод-управління"><span>Мандатний метод управління</span></a></h4><p>Обов&#39;язкове або примусове управління доступом вважається найбільш обмежувальною формою доступу, оскільки воно надає контроль та управління системою й точками доступу тільки власнику об&#39;єкта або адміністратору системи. В обов&#39;язковій моделі контролю доступу застосовується таке поняття, як мітка об&#39;єкта або мандат, який визначає ступінь важливості ресурсу та присвоюється йому в момент створення. У мандатній моделі користувачам не дозволяється змінювати рівень доступу до ресурсів, перевищуючи той, який спочатку встановлений адміністратором.</p><blockquote><p>Якщо потрібно підвищити рівень доступу, то створюється новий профіль з обліковими даними користувача. Адміністратору надано право змінювати налаштування тільки відповідно параметрами системи, які визначаються загальною політикою безпеки об&#39;єкта. Обов&#39;язковий контроль доступу доцільно використовувати на об&#39;єктах та для організацій, де потрібна максимальна безпека й обмеження. Це такі структури як військові та урядові установи, а також корпорації, які вважають за необхідне застосовувати підвищений рівень безпеки.</p></blockquote><h3 id="моделі-зберігання-даних" tabindex="-1"><a class="header-anchor" href="#моделі-зберігання-даних"><span>Моделі зберігання даних</span></a></h3><p>Хостинг — це технологія розміщення даних та програм на серверах для доступу до них через інтернет або приватні мережі. Існує кілька основних моделей хостингу, кожна з яких має свої переваги та недоліки.</p><ul><li><p><strong>Self-hosted (самостійний хостинг)</strong><br> Самостійний хостинг — це коли користувач розміщує свої сервіси або дані на власних серверах, які повністю контролюються ним.<br> Переваги: Повний контроль над усіма аспектами хостингу, максимальна конфіденційність даних, можливість налаштувати індивідуальні рішення для конкретних потреб.<br> Недоліки: Вимагає значних технічних знань та ресурсів для підтримки, високі витрати на обладнання та технічне обслуговування.</p></li><li><p><strong>Shared hosting (спільний хостинг)</strong><br> Спільний хостинг передбачає, що кілька користувачів розміщують свої дані на одному сервері, де ресурси розподіляються між ними.<br> Переваги: Низька вартість, простота налаштування, технічна підтримка від хостинг-провайдера.<br> Недоліки: Обмежена потужність і ресурси, які розділяються між кількома користувачами, можливі збої через діяльність інших користувачів на сервері.</p></li><li><p><strong>Dedicated hosting (виділений хостинг)</strong><br> Ця модель передбачає використання виділеного сервера для одного клієнта, що забезпечує повну ізоляцію та максимальну продуктивність.<br> Переваги: Повна ізоляція та максимальна потужність сервера лише для одного клієнта, високий рівень безпеки та продуктивності.<br> Недоліки: Висока вартість, необхідність технічного управління сервером.</p></li><li><p><strong>VPS hosting (віртуальний приватний сервер)</strong><br> Віртуальний приватний сервер (VPS) — це хостинг, де фізичний сервер розділений на кілька віртуальних машин, кожна з яких працює незалежно.<br> Переваги: Краща ізоляція та виділені ресурси в порівнянні зі спільним хостингом, можливість налаштування та керування, гнучкість.<br> Недоліки: Вимагає певних технічних знань, ресурси все ще розділяються з іншими користувачами на фізичному сервері.</p></li><li><p><strong>Cloud hosting (хмарний хостинг)</strong><br> Хмарний хостинг використовує мережу віртуальних серверів, які взаємодіють між собою через інтернет.<br> Переваги: Масштабованість та гнучкість, оплата лише за використані ресурси, високий рівень доступності та надійності, автоматичне резервне копіювання та відновлення даних.<br> Недоліки: Залежність від інтернет-з’єднання, можливі проблеми з конфіденційністю даних через розташування серверів у різних країнах, вартість може збільшуватися з часом при зростанні обсягу зберігання.</p></li></ul><h3 id="основні-види-баз-даних" tabindex="-1"><a class="header-anchor" href="#основні-види-баз-даних"><span>Основні види баз даних</span></a></h3><ol><li><p><strong>Distributed databases (розподілені бази даних)</strong><br> Розподілені бази даних зберігають дані на кількох серверах або вузлах, які можуть бути географічно розташовані в різних місцях.<br> Переваги: Висока доступність даних, масштабованість, стійкість до збоїв у окремих вузлах системи.<br> Недоліки: Складність у підтримці консистентності даних, ускладнене управління через розподіл між різними локаціями.</p></li><li><p><strong>Hierarchical databases (ієрархічні бази даних)</strong><br> Ієрархічні бази даних організовані як дерево, де кожен запис має один або кілька підлеглих записів, що утворює чітку ієрархію.<br> Переваги: Швидкий доступ до даних завдяки чіткій ієрархічній структурі, зручні для систем, де дані мають природну ієрархію.<br> Недоліки: Негнучкість структури, складнощі при внесенні змін, не підходить для багатовимірних даних.</p></li><li><p><strong>Network databases (мережеві бази даних)</strong><br> Мережеві бази даних дозволяють мати множинні зв’язки між записами, що дає змогу зберігати дані у більш складних структурах.<br> Переваги: Гнучкіша структура в порівнянні з ієрархічною, дозволяє множинні зв’язки між записами.<br> Недоліки: Складність в управлінні та навігації, вимагає складнішого адміністрування.</p></li><li><p><strong>Object-oriented databases (об’єктно-орієнтовані бази даних)</strong><br> Об’єктно-орієнтовані бази даних зберігають дані у вигляді об’єктів, подібно до об’єктно-орієнтованого програмування, з підтримкою властивостей і методів.<br> Переваги: Підтримка складних об’єктів та їхніх взаємозв&#39;язків, зручні для зберігання мультимедійних та графічних даних.<br> Недоліки: Складніші у порівнянні з реляційними базами, обмежена сумісність із іншими типами баз даних.</p></li><li><p><strong>NoSQL databases (NoSQL бази даних)</strong><br> NoSQL бази даних не використовують реляційну модель і зазвичай не потребують фіксованої структури даних, що робить їх придатними для великих обсягів неструктурованої інформації.<br> Переваги: Висока масштабованість, підтримка неструктурованих та великих даних, гнучкість у зберіганні різних типів даних.<br> Недоліки: Відсутність стандартного синтаксису запитів, складність у підтримці консистентності даних.</p></li><li><p><strong>Centralized Database (централізована база даних)</strong><br> Централізовані бази даних зберігають усі дані в одному місці або на одному сервері, що полегшує управління та контроль.<br> Переваги: Легкість управління та підтримки, єдине місце зберігання даних.<br> Недоліки: Єдина точка відмови, обмежена масштабованість.</p></li><li><p><strong>Operational Database (операційна база даних)</strong><br> Операційні бази даних призначені для управління щоденними транзакціями та зберігання актуальних даних, що постійно змінюються.<br> Переваги: Швидкий доступ до поточних даних, оптимізовані для щоденних операцій та транзакцій.<br> Недоліки: Можуть бути перевантажені при великому потоці транзакцій, не завжди підходять для аналітики.</p></li><li><p><strong>Relational databases (реляційні бази даних)</strong><br> Реляційні бази даних зберігають інформацію в таблицях, де зв’язки між даними реалізовані через ключі. Використовуються мови запитів, як-от SQL.<br> Переваги: Зручна робота з таблицями, підтримка стандартного SQL, забезпечення цілісності та зв&#39;язків між даними.<br> Недоліки: Можуть бути менш ефективними для дуже великих чи неструктурованих даних, обмежена масштабованість.</p></li></ol><h3 id="формати-зберігання-даних-об-єктів" tabindex="-1"><a class="header-anchor" href="#формати-зберігання-даних-об-єктів"><span>Формати зберігання даних об&#39;єктів</span></a></h3><ul><li><p><strong>JSON (JavaScript Object Notation)</strong><br> JSON — це текстовий формат, який використовується для передачі структурованих даних, особливо в веб-додатках.<br> Переваги: Легкий для читання і написання, широко використовується у веб-розробці, легко інтегрується з мовами програмування.<br> Недоліки: Не підтримує коментарі, може стати важким для обробки при великих обсягах даних.</p></li><li><p><strong>XML (Extensible Markup Language)</strong><br> XML — це гнучкий текстовий формат для опису даних, який широко використовується для обміну інформацією між системами.<br> Переваги: Сильна підтримка схем і валідації даних, легко обробляється різними мовами програмування.<br> Недоліки: Великий обсяг через використання тегів, складніший синтаксис в порівнянні з JSON.</p></li><li><p><strong>CSV (Comma-Separated Values)</strong><br> CSV — це простий текстовий формат для зберігання табличних даних, де значення розділяються комами.<br> Переваги: Простота у використанні, сумісність з багатьма програмами для роботи з таблицями, зручний для малих наборів даних.<br> Недоліки: Не підтримує вкладені структури, обмежена можливість валідації даних.</p></li><li><p><strong>YAML (YAML Ain&#39;t Markup Language)</strong><br> YAML — це зручний для людини формат даних, який використовується для конфігураційних файлів та обміну даними.<br> Переваги: Легкий для читання та написання, підтримує вкладені структури та коментарі.<br> Недоліки: Менш поширений, складніший парсинг у порівнянні з JSON.</p></li><li><p><strong>INI (Initialization File)</strong><br> INI — це простий формат для зберігання конфігурацій, де дані організовані у вигляді ключ-значення.<br> Переваги: Простий і легкий для обробки, добре підходить для невеликих конфігураційних файлів.<br> Недоліки: Не підтримує складні або вкладені структури, обмежена можливість валідації.</p></li><li><p><strong>SQL (Structured Query Language)</strong><br> SQL — це мова запитів для роботи з реляційними базами даних, яка також використовується для зберігання даних в структурованому форматі.<br> Переваги: Підтримка складних запитів і структурованих даних, сильні механізми контролю цілісності даних.<br> Недоліки: Потребує налаштування і підтримки бази даних, не є текстовим форматом для безпосереднього обміну даними.</p></li></ul><h2 id="порівняльна-характеристика-існуючих-засобів-вирішення-завдання" tabindex="-1"><a class="header-anchor" href="#порівняльна-характеристика-існуючих-засобів-вирішення-завдання"><span>Порівняльна характеристика існуючих засобів вирішення завдання</span></a></h2>',52),ot={id:"google-public-data-explorer",tabindex:"-1"},st={class:"header-anchor",href:"#google-public-data-explorer"},it={href:"https://www.google.com/publicdata/directory",target:"_blank",rel:"noopener noreferrer"},lt=t("p",null,[t("strong",null,"Google Public Data Explorer"),e(" — це інструмент, створений Google, який дозволяє користувачам знаходити, досліджувати та візуалізувати великі набори відкритих даних. Цей сервіс надає можливість створювати інтерактивні графіки, карти та діаграми на основі даних, що надходять від урядових установ, міжнародних організацій та дослідницьких інституцій.")],-1),dt=t("figure",null,[t("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),pt={id:"gapminder",tabindex:"-1"},ht={class:"header-anchor",href:"#gapminder"},ct={href:"https://www.gapminder.org",target:"_blank",rel:"noopener noreferrer"},gt=t("p",null,[t("strong",null,"Gapminder"),e(" — це некомерційна організація, заснована шведським професором Гансом Рослінгом, з метою популяризації глобальної освіти через статистичні дані. Gapminder розробляє інструменти, які допомагають візуалізувати світові тренди в різних сферах, таких як здоров'я, економіка, демографія та соціальний розвиток. Gapminder відіграє важливу роль у популяризації наукових даних і використовується у навчальних закладах, наукових дослідженнях і медіа для аналізу глобальних трендів.")],-1),bt=t("figure",null,[t("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),ut={id:"the-world-bank-databank",tabindex:"-1"},_t={class:"header-anchor",href:"#the-world-bank-databank"},Dt={href:"https://databank.worldbank.org",target:"_blank",rel:"noopener noreferrer"},mt=t("p",null,[t("strong",null,"The World Bank DataBank"),e(" — це інтерактивний інструмент, створений Світовим банком для надання доступу до величезної кількості світових економічних та соціальних даних. Він дозволяє користувачам переглядати, аналізувати та завантажувати дані, що стосуються таких сфер, як розвиток, економіка, демографія, інфраструктура, освіта, охорона здоров'я, екологія тощо.")],-1),kt=t("figure",null,[t("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),ft={id:"openstreetmap",tabindex:"-1"},Bt={class:"header-anchor",href:"#openstreetmap"},xt={href:"https://www.openstreetmap.org",target:"_blank",rel:"noopener noreferrer"},wt=t("p",null,[t("strong",null,"OpenStreetMap (OSM)"),e(" — це краудсорсингова платформа, що забезпечує вільний доступ до географічних даних усього світу. Проект був заснований у 2004 році Стівом Коастом, і з того часу став однією з найбільших відкритих географічних баз даних. OSM використовує колективний внесок добровольців, які збирають, редагують і додають географічні дані, такі як дороги, будівлі, річки, ландшафти, кордони тощо. Відкритість платформи дозволяє її широке використання в різних галузях — від мобільних додатків до досліджень і гуманітарної допомоги.")],-1),St=t("figure",null,[t("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),Pt={id:"undata",tabindex:"-1"},yt={class:"header-anchor",href:"#undata"},vt={href:"https://data.un.org",target:"_blank",rel:"noopener noreferrer"},Et=a('<p><strong>UNdata</strong> — це платформа, створена Статистичним відділом Організації Об&#39;єднаних Націй (ООН) для надання доступу до різноманітних статистичних даних, що охоплюють численні галузі, зібрані з країн-членів ООН та міжнародних агентств. UNdata дозволяє дослідникам, аналітикам, журналістам і будь-кому зацікавленому отримувати доступ до важливої інформації для аналізу, планування та моніторингу глобальних і національних показників.</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="табличне-порівняння" tabindex="-1"><a class="header-anchor" href="#табличне-порівняння"><span>Табличне порівняння</span></a></h3><p>Критерії:</p><ul><li>🟢 - функція реалізована</li><li>🟡 - функція реалізована частково або має певні недоліки</li><li>❌ - функція не реалізована</li></ul><table><thead><tr><th>Загальні вимоги</th><th>Конкретні вимоги</th><th>G.P.D.E.</th><th>Gapminder</th><th>DataBank</th><th>OpenStreetMap</th><th>UNdata</th></tr></thead><tbody><tr><td>Functionality</td><td>Відповідність вимогам</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td></td><td>Інтеграція з іншими системами</td><td>🟡</td><td>🟡</td><td>🟡</td><td>🟢</td><td>🟡</td></tr><tr><td></td><td>Безпека</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟡</td><td>🟢</td></tr><tr><td></td><td>Візуалізація даних</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟡</td></tr><tr><td>Usability</td><td>Легкість навчання</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟡</td><td>🟢</td></tr><tr><td></td><td>Підтримка багатьох мов</td><td>🟡</td><td>🟡</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td></td><td>Документація</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td></td><td>Інтуїтивний інтерфейс</td><td>🟢</td><td>🟢</td><td>🟡</td><td>🟡</td><td>🟡</td></tr><tr><td>Reliability</td><td>Точність результатів</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟡</td><td>🟢</td></tr><tr><td></td><td>Стійкість до навантажень</td><td>🟡</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td></td><td>Відновлюваність</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td></td><td>Ліцензія</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td>Performance</td><td>Швидкість виконання</td><td>🟡</td><td>🟢</td><td>🟡</td><td>🟢</td><td>🟡</td></tr><tr><td></td><td>Масштабованість</td><td>🟡</td><td>🟡</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td>Supportability</td><td>Зворотний зв&#39;язок</td><td>🟡</td><td>🟡</td><td>🟡</td><td>🟢</td><td>🟡</td></tr><tr><td></td><td>Оновлюваність</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr></tbody></table><h2 id="висновки" tabindex="-1"><a class="header-anchor" href="#висновки"><span>Висновки</span></a></h2><p><em>[Робляться висновки щодо доцільності розробки нової або модифікації існуючої інформаційної системи, необхідності та способів інтеграції з системами(сервісами) третіх сторін, тощо.]</em></p><h2 id="посилання" tabindex="-1"><a class="header-anchor" href="#посилання"><span>Посилання</span></a></h2><p><em>[Розділ містить повний список всіх документів, про які згадується.]</em></p>',10);function Lt(qt,At){const n=s("ExternalLinkIcon");return i(),l("div",null,[u,t("h4",_,[t("a",D,[t("span",null,[t("a",m,[e("API (Application Programming Interface)"),r(n)])])])]),k,t("p",null,[f,t("a",B,[e("Facebook Graph API"),r(n)]),e(" дозволяє отримувати дані з профілів користувачів та аналізувати їх взаємодію, але при цьому вимагає авторизації та дотримання певних умов використання.")]),x,t("h4",w,[t("a",S,[t("span",null,[t("a",P,[e("Веб-скрапінг (Web Scraping)"),r(n)])])])]),y,t("h4",v,[t("a",E,[t("span",null,[t("a",L,[e("Веб-краулінг (Web Crawling)"),r(n)])])])]),q,t("p",null,[A,t("a",M,[e("Googlebot"),r(n)]),e(" — це краулер, що індексує мільйони сторінок щодня, збираючи дані для пошукових результатів.")]),O,t("h4",T,[t("a",I,[t("span",null,[t("a",N,[e("Краудсорсинг (Crowdsourcing)"),r(n)])])])]),G,t("p",null,[C,t("a",z,[e("Waze"),r(n)]),e(" — додаток для навігації, що збирає інформацію про дорожні умови через краудсорсинг від користувачів.")]),F,t("h4",W,[t("a",V,[t("span",null,[t("a",U,[e("Машинне навчання (Machine learning)"),r(n)])])])]),Q,J,Y,j,t("h4",R,[t("a",Z,[t("span",null,[t("a",X,[e("Табличні процесори (Spreadsheet)"),r(n)])])])]),H,K,$,tt,t("h4",et,[t("a",nt,[t("span",null,[t("a",rt,[e("Мови програмування"),r(n)])])])]),at,t("h3",ot,[t("a",st,[t("span",null,[t("a",it,[e("Google Public Data Explorer"),r(n)])])])]),lt,dt,t("h3",pt,[t("a",ht,[t("span",null,[t("a",ct,[e("Gapminder"),r(n)])])])]),gt,bt,t("h3",ut,[t("a",_t,[t("span",null,[t("a",Dt,[e("The World Bank DataBank"),r(n)])])])]),mt,kt,t("h3",ft,[t("a",Bt,[t("span",null,[t("a",xt,[e("OpenStreetMap"),r(n)])])])]),wt,St,t("h3",Pt,[t("a",yt,[t("span",null,[t("a",vt,[e("UNdata"),r(n)])])])]),Et])}const Tt=o(b,[["render",Lt],["__file","state-of-the-art.html.vue"]]),It=JSON.parse(`{"path":"/requirements/state-of-the-art.html","title":"Аналіз предметної області","lang":"en-US","frontmatter":{"description":"Аналіз предметної області Вступ [Вступ повинен містити короткий огляд всього документу.] Основні визначення [Розділ містить визначення термінів та скорочень, які використовуютьс...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/db-labs/requirements/state-of-the-art.html"}],["meta",{"property":"og:site_name","content":"Система управління відкритими даними"}],["meta",{"property":"og:title","content":"Аналіз предметної області"}],["meta",{"property":"og:description","content":"Аналіз предметної області Вступ [Вступ повинен містити короткий огляд всього документу.] Основні визначення [Розділ містить визначення термінів та скорочень, які використовуютьс..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-28T16:30:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-28T16:30:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Аналіз предметної області\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-28T16:30:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Вступ","slug":"вступ","link":"#вступ","children":[]},{"level":2,"title":"Основні визначення","slug":"основні-визначення","link":"#основні-визначення","children":[]},{"level":2,"title":"Підходи та способи вирішення завдання","slug":"підходи-та-способи-вирішення-завдання","link":"#підходи-та-способи-вирішення-завдання","children":[{"level":3,"title":"Підходи до збору даних","slug":"підходи-до-збору-даних","link":"#підходи-до-збору-даних","children":[]},{"level":3,"title":"Способи аналізу даних","slug":"способи-аналізу-даних","link":"#способи-аналізу-даних","children":[]},{"level":3,"title":"Методи обробки даних","slug":"методи-обробки-даних","link":"#методи-обробки-даних","children":[]},{"level":3,"title":"Моделі керування доступом до даних","slug":"моделі-керування-доступом-до-даних","link":"#моделі-керування-доступом-до-даних","children":[]},{"level":3,"title":"Моделі зберігання даних","slug":"моделі-зберігання-даних","link":"#моделі-зберігання-даних","children":[]},{"level":3,"title":"Основні види баз даних","slug":"основні-види-баз-даних","link":"#основні-види-баз-даних","children":[]},{"level":3,"title":"Формати зберігання даних об'єктів","slug":"формати-зберігання-даних-об-єктів","link":"#формати-зберігання-даних-об-єктів","children":[]}]},{"level":2,"title":"Порівняльна характеристика існуючих засобів вирішення завдання","slug":"порівняльна-характеристика-існуючих-засобів-вирішення-завдання","link":"#порівняльна-характеристика-існуючих-засобів-вирішення-завдання","children":[{"level":3,"title":"Google Public Data Explorer","slug":"google-public-data-explorer","link":"#google-public-data-explorer","children":[]},{"level":3,"title":"Gapminder","slug":"gapminder","link":"#gapminder","children":[]},{"level":3,"title":"The World Bank DataBank","slug":"the-world-bank-databank","link":"#the-world-bank-databank","children":[]},{"level":3,"title":"OpenStreetMap","slug":"openstreetmap","link":"#openstreetmap","children":[]},{"level":3,"title":"UNdata","slug":"undata","link":"#undata","children":[]},{"level":3,"title":"Табличне порівняння","slug":"табличне-порівняння","link":"#табличне-порівняння","children":[]}]},{"level":2,"title":"Висновки","slug":"висновки","link":"#висновки","children":[]},{"level":2,"title":"Посилання","slug":"посилання","link":"#посилання","children":[]}],"git":{"createdTime":1708081508000,"updatedTime":1727541037000,"contributors":[{"name":"dk872","email":"143122117+dk872@users.noreply.github.com","commits":6},{"name":"watashone","email":"102485743+watashone@users.noreply.github.com","commits":2},{"name":"Dmytro Zanuda","email":"dmzanuda.work@gmail.com","commits":1},{"name":"Lev","email":"lev.bereza@gmail.com","commits":1},{"name":"YKantur","email":"144107607+YKantur@users.noreply.github.com","commits":1},{"name":"Yulianna Vakhnina","email":"yuliannabd@gmail.com","commits":1}]},"readingTime":{"minutes":14.8,"words":4440},"filePathRelative":"requirements/state-of-the-art.md","localizedDate":"February 16, 2024","autoDesc":true}`);export{Tt as comp,It as data};
